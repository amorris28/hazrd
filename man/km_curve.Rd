% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/km_curve.R
\name{km_curve}
\alias{km_curve}
\title{Return Kaplan-Meier curve}
\usage{
km_curve(
  data = NULL,
  phs = "phs",
  age = "age",
  status = "status",
  upper,
  lower,
  age_range = 40:100,
  scale = FALSE,
  inverse = FALSE
)
}
\arguments{
\item{data}{an optional data.frame containing the variables for phs, age, and status}

\item{phs}{an optional string specifying the column name in \code{data} containing the polygenic hazard score for each subject or the unquoted name of a vector containing these values. The default is "phs"}

\item{age}{an optional string specifying the column name in \code{data} containing the age of each subject or the unquoted name of a vector containing these values. For cases, this should be the age at event (e.g., diagnosis) and for controls this should be age of censoring (e.g., last observation). The default is "age"}

\item{status}{an optional string specifying the column name in \code{data} containing case-control status (0 = censored, 1 = event) or the unquoted name of a vector containing these values. The default is "status"}

\item{upper}{a single number specifying the upper end of the quantile. e.g., 1.0}

\item{lower}{a single number specifying the lower end of the quantile. e.g., 0.8}

\item{age_range}{a vector of ages over which curves should be calculated. Default = 40:100}

\item{scale}{logical. if \code{TRUE} centers and scales the PHS scores to unit variance. Default = \code{FALSE}.}

\item{inverse}{logical. if \code{TRUE} calculates the inverse (x * -1) the PHS scores to reverse the direction of effect. Default = \code{FALSE}.}
}
\value{
A data.frame containing ages, the K-M curve, and the upper and lower confidence intervals
}
\description{
This function returns a single Kaplan-Meier curve for plotting.
Output includes age, the K-M estimate at each age, and  the upper and lower confidence intervals
}
\examples{
\dontrun{
km_curve <- km_curve(df, inverse = TRUE, ideal = FALSE)
ggplot(km_curve, aes(x = time,
                     y = estimate,
                     ymin = conf.low,
                     ymax = conf.high)) +
                     geom_ribbon() +
                     geom_step()
}
}
