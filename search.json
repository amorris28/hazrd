[{"path":"https://amorris28.github.io/hazrd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 hazrd authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"generating-test-statistics-and-confidence-intervals","dir":"Articles","previous_headings":"","what":"Generating test statistics and confidence intervals","title":"Getting started with `{hazrd}`","text":", calculate hazard ratio comparing mean top 20% PHSes mean bottom 20% (.e., HR80_20). can also generate 95% confidence intervals using bootstrapping. get_ function also returns output bootstrap iteration $iters user can plot calculate confidence intervals:  Similarly, calculate odds ratio age 70 top 20% bottom 20% PHSes.  Return concordance index 95% confidence intervals coxph fit: Finally, plot Kaplan-Meier curves confidence intervals centiles interest.","code":"HR80_20 = get_hr(test_data, bootstrap.iterations = 300) str(HR80_20) #> List of 3 #>  $ value    : num 8.17 #>  $ conf.low : num 6.17 #>  $ conf.high: num 11.4 ggplot(mapping = aes(x = HR80_20$iters)) +     geom_histogram(binwidth = 2/3) +     geom_vline(xintercept = HR80_20$HR, color = \"red\") +     geom_vline(xintercept = HR80_20$conf.low) +     geom_vline(xintercept = HR80_20$conf.high) +         theme_minimal() +         labs(x = \"HR80_20\", y = \"Count\") OR80_20 = get_or(test_data, or_age = 70, bootstrap.iterations = 300) str(OR80_20) #> List of 3 #>  $ value    : num 8.52 #>  $ conf.low : num 4.53 #>  $ conf.high: num 17.1 ggplot(mapping = aes(x = OR80_20$iters)) +     geom_histogram(binwidth = 3/2) +     geom_vline(xintercept = OR80_20$OR, color = \"red\") +     geom_vline(xintercept = OR80_20$conf.low) +     geom_vline(xintercept = OR80_20$conf.high) +         theme_minimal() +         labs(x = \"OR80_20\", y = \"Count\") c_index = get_cindex(test_data, bootstrap.iterations = 300) str(c_index) #> List of 3 #>  $ value    : num 0.708 #>  $ conf.low : num 0.678 #>  $ conf.high: num 0.734 curves = data.frame(curve0_20 = c(0,   0.2),                     curve20_70 = c(0.2, 0.7),                     curve80_98 = c(0.8, 0.98),                     curve98_100 = c(0.98, 1.0))  label_generator = function(x, y) {     x = x * 100     y = y * 100     out = paste0(\"PHS \", x, \"-\", y, \"th centile\")     return(out) }  km_curves = data.frame() for (i in seq_len(length(curves))) {     curven <- km_curve(test_data,                          interval = curves[[i]],                        age_range = 40:100,                         scale = FALSE,                         inverse = FALSE)     curven$label = label_generator(curves[1, i], curves[2, i])     km_curves = rbind(km_curves, curven) }   ggplot(km_curves, aes(x = time,                        y = estimate,                       ymin = conf.low,                       ymax = conf.high,                       col = label,                       fill = label)) +     geom_ribbon(alpha = 0.1,                 color = 0) +     geom_step() +     theme_minimal() +     xlim(40, 100) +      ylim(0, 1) +     labs(x = \"Age\", y = \"Disease-free Survival\") +     scale_color_brewer(palette = \"Set1\",                        name = \"Centile\") +     scale_fill_brewer(palette = \"Set1\",                        name = \"Centile\") #> Warning: Removed 16 rows containing missing values or values outside the scale range #> (`geom_ribbon()`). #> Warning: Removed 15 rows containing missing values or values outside the scale range #> (`geom_step()`)."},{"path":[]},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"data-format","dir":"Articles","previous_headings":"More advanced topics","what":"Data format","title":"Getting started with `{hazrd}`","text":"functions package (e.g., get_hr, get_or, phs_hist, etc.) can accept data several formats. data.frame contains standard columns phs, age, status, can simply pass data.frame object first argument: data stored data.frame non-standard column names, e.g., HazardScores, CaseControl, AgeLastObs, can specify column names separate arguments:","code":"get_hr(test_data) |>      str() #> List of 1 #>  $ value: num 8.17 test_data2 = with(test_data, data.frame(HazardScores = phs,                                          CaseControl = status,                                          AgeLastObs = age)) head(test_data2) #>   HazardScores CaseControl AgeLastObs #> 1    0.8425735           1   67.95011 #> 2    1.1151321           0   56.31356 #> 3   -0.3777455           1   72.94103 #> 4    0.1201511           1   82.01571 #> 5   -0.4041602           1   74.33629 #> 6   -0.4531890           1   77.15814 get_hr(test_data2,         phs = \"HazardScores\",         status = \"CaseControl\",         age = \"AgeLastObs\") |>      str() #> List of 1 #>  $ value: num 8.17"},{"path":[]},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"specifying-intervals","dir":"Articles","previous_headings":"More advanced topics > Hazard ratios and odds ratios","what":"Specifying intervals","title":"Getting started with `{hazrd}`","text":"get_hr function allows several options customizing hazard ratios. default, calculates HR80_20, compares top 20% PHSes bottom 20%. However, custom intervals can specified using numerator denominator arguments. default arguments. one value passed numerator calculates hazard ratio interval 0.8:Inf. Similarly, denominator use -Inf:0.2. However, two values can specified vector specify particular range. example, want lower interval middle 40% PHSes, can specify denominator = c(0.3, 0.7). interval specifications odds ratios get_or get_hr. difference odds ratio must calculated particular age, passed or_age argument:","code":"get_hr(test_data,        numerator = c(0.8, 1.0),        denominator = c(0.0, 0.2)) |>      str() #> List of 1 #>  $ value: num 8.17 get_hr(test_data,        numerator = c(0.8, 1.0),        denominator = c(0.3, 0.7)) |>      str() #> List of 1 #>  $ value: num 3.04 get_or(test_data,        or_age = 70,        numerator = c(0.8, 1.0),        denominator = c(0.3, 0.7)) |>      str() #> List of 1 #>  $ value: num 3.83"},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"confidence-intervals-from-bootstrapping","dir":"Articles","previous_headings":"More advanced topics > Hazard ratios and odds ratios","what":"Confidence intervals from bootstrapping","title":"Getting started with `{hazrd}`","text":"95% confidence intervals estimates get_hr, get_or, get_cindex functions can generated bootstrapping. done specifying number bootstrap iterations bootstrap.iterations =. case, get_hr returns list containing hazard ratio values upper lower 95% confidence intervals well HR estimates bootstrap iteration iters.","code":"get_hr(test_data,        bootstrap.iterations = 300) |>      str() #> List of 3 #>  $ value    : num 8.17 #>  $ conf.low : num 6.1 #>  $ conf.high: num 11.1"},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"plotting-curves","dir":"Articles","previous_headings":"More advanced topics","what":"Plotting curves","title":"Getting started with `{hazrd}`","text":"plot Kaplan-Meier curves, can use km_curve function return single Kaplan-Meier curve given interval. Plotting must performed manually returned curves. interval specifies lower upper quantile interval. case, K-M curve top 20% samples (0.8:1.0) returned. addition, age_range specifies ages curve generated. Can order 40:100 age--diagnosis similar. Alternatively, can 0:10 , exmaple, age conversion AD MCI diagnosis. can generate multiple curves various intervals get data.frame: plot :","code":"curven <- km_curve(test_data,                          interval = c(0.80, 1.00),                         age_range = 40:100,                         scale = FALSE,                         inverse = FALSE) curves = data.frame(curve0_20 = c(0,   0.2),                     curve20_70 = c(0.2, 0.7),                     curve80_98 = c(0.8, 0.98),                     curve98_100 = c(0.98, 1.0))  label_generator = function(x, y) {     x = x * 100     y = y * 100     out = paste0(\"PHS \", x, \"-\", y, \"th centile\")     return(out) }  km_curves = data.frame() for (i in seq_len(length(curves))) {     curven <- km_curve(test_data,                          interval = curves[[i]],                        age_range = 40:100,                         scale = FALSE,                         inverse = FALSE)     curven$label = label_generator(curves[1, i], curves[2, i])     km_curves = rbind(km_curves, curven) } ggplot(km_curves, aes(x = time,                        y = estimate,                       ymin = conf.low,                       ymax = conf.high,                       col = label,                       fill = label)) +     geom_ribbon(alpha = 0.1,                 color = 0) +     geom_step() +     theme_minimal() +     xlim(40, 100) +      ylim(0, 1) +     labs(x = \"Age\", y = \"Disease-free Survival\") +     scale_color_brewer(palette = \"Set1\",                        name = \"Centile\") +     scale_fill_brewer(palette = \"Set1\",                        name = \"Centile\") #> Warning: Removed 16 rows containing missing values or values outside the scale range #> (`geom_ribbon()`). #> Warning: Removed 15 rows containing missing values or values outside the scale range #> (`geom_step()`)."},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"individual-prediction","dir":"Articles","previous_headings":"More advanced topics","what":"Individual Prediction","title":"Getting started with `{hazrd}`","text":"possible generate lookup table perform individual prediction new, un-observed individual calculated PHS score. , fit model using data generate predicted curves 99 percentiles (1 99%). output curves associated PHS score percentile. removes connection subject-level data safe export secure computing platforms. can plot prediction closest percentile new individual’s PHS example workflow: Export lookup table computing platform identify percentile new subject. Based toy dataset, subject PHS 1.6 approximately 94th percentile. , plot predicted curve median percentiel (50%) gray shaded area confidence intervals, individual line every percentile 1 99, highlighted red predicted risk curve confidence intervals “new” hypothetical subject PHS 1.6 (94th percentile):","code":"# Create the lookup table (on a secure computing platform using # individual-level data)  lookup_table = create_lookup_table(test_data) ggplot(lookup_table[lookup_table$percentile == 0.50, ],         aes(x = time, y = surv, ymin = lower, ymax = upper)) +     geom_line() +     geom_ribbon(alpha = 0.5) +     theme_classic() +     geom_line(aes(x = time, y = surv, group = percentile), data = lookup_table, alpha = 0.1) +     geom_line(aes(x = time, y = surv, group = percentile),                  data = lookup_table[lookup_table$percentile == 0.94, ],                  color = \"red\") +     geom_ribbon(aes(x = time, y = surv, ymin = lower, ymax = upper),                  data = lookup_table[lookup_table$percentile == 0.94, ],                  alpha = 0.5, fill = \"red\") +     labs(x = \"Age\", y = \"Disease-free Survival\")"},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"percentiles-versus-quintiles-for-comparison-and-prediction","dir":"Articles","previous_headings":"","what":"Percentiles versus Quintiles for comparison and prediction","title":"Getting started with `{hazrd}`","text":"literature PHS, least two ways folks visualize survival estimates different PHS models. One compare 20th percentile 80th percentile. compare quintiles, , top 20% PHSes bottom 20%. explanation estimates compare:","code":""},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"percentiles","dir":"Articles","previous_headings":"Percentiles versus Quintiles for comparison and prediction","what":"Percentiles","title":"Getting started with `{hazrd}`","text":", blue line 20th percentile, green line 50th percentile, red line 80th percentile.","code":"library(survival) ages = seq(40, 100, length.out = 10000)  # Fit the coxph model cp_fit = coxph(Surv(age, status) ~ phs, data = test_data)  # Calculate the PHS at each percentile of interest phs0.2 = as.numeric(quantile(test_data$phs, 0.2)) phs0.8 = as.numeric(quantile(test_data$phs, 0.8)) phs0.5 = as.numeric(quantile(test_data$phs, 0.5))   # Generate some new data for prediction using these PHS scores new_data0.2 <- data.frame(status = 1,                          age = ages,                          phs = phs0.2) new_data0.8 = new_data0.2 new_data0.8$phs = phs0.8 new_data0.5 = new_data0.2 new_data0.5$phs = phs0.5  # Using our original model, generate a predicted survival curve cp_predict_0.2 <- predict(cp_fit, new_data0.2, type = \"survival\") cp_predict_0.8 <- predict(cp_fit, new_data0.8, type = \"survival\") cp_predict_0.5 <- predict(cp_fit, new_data0.5, type = \"survival\")  ggplot() +     geom_step(aes(x = age, y = cp_predict_0.2), data = new_data0.2, color = 4) +     geom_step(aes(x = age, y = cp_predict_0.8), data = new_data0.8, color = 2) +     geom_step(aes(x = age, y = cp_predict_0.5), data = new_data0.5, color = 3) +     labs(x = \"Age\", y = \"Disease-free Survival\") +     theme_minimal()"},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"quintiles","dir":"Articles","previous_headings":"Percentiles versus Quintiles for comparison and prediction","what":"Quintiles","title":"Getting started with `{hazrd}`","text":", blue line survival curve bottom 20% PHSes, green line survival curve middle 60% PHSes (20-80%), red line survival curve top 20% PHSes. Lastly, can compare two approaches see generate different survival curves:  , blue curves quintile curves group-based curves red curves percentile-based curves. 0-20 80-100 curves close exactly 10% percentile 90% percentile:  blue curves group-based curves (0-20, 20-80, 80-100%) pink curves prediction 10th percentile 90th percentile. Now, comparing 90th percentile individual “empirical” curve subjects top quintile:  , blue prediction 90th percentile full PHS model. Red prediction 80-100% group “PHS Group” model. green “empirical” survival curve just individuals 80-100% group. One thing want add way test proportional hazard assumptions model cox.zph function.","code":"# Cut the PHSes into groups based on percentile. # Here, we are splitting them into 0-20%, 20-80%, and 80-100% test_data$phs_group <- cut(test_data$phs, c(-Inf, phs0.2, phs0.8, Inf),                     labels = c(\"0-20\", \"20-80\", \"80-100\"))  # Fit the model, this time with group as the predictor rather than the PHS cp_fit_group <- coxph(Surv(age, status) ~ phs_group, test_data)  # Generate some new data for prediction new_data0020 <- data.frame(status = 1,                            age = ages,                            phs_group = \"0-20\") new_data2080 <- new_data0020 new_data2080$phs_group = \"20-80\" new_data80100 <- new_data0020 new_data80100$phs_group = \"80-100\"  # Generate a predicted survival curve cp_predict_0020 <- predict(cp_fit_group, new_data0020, type = \"survival\") cp_predict_2080 <- predict(cp_fit_group, new_data2080, type = \"survival\") cp_predict_80100 <- predict(cp_fit_group, new_data80100, type = \"survival\")  # Plot the curves for each group ggplot() +     geom_step(aes(x = age, y = cp_predict_0020), data = new_data0020, color = 4) +     geom_step(aes(x = age, y = cp_predict_80100), data = new_data80100, color = 2) +     geom_step(aes(x = age, y = cp_predict_2080), data = new_data2080, color = 3) +     labs(x = \"Age\", y = \"Disease-free Survival\") +     theme_minimal() ggplot() +     geom_step(aes(x = age, y = cp_predict_0020), data = new_data0020, color = 4) +     geom_step(aes(x = age, y = cp_predict_2080), data = new_data2080, color = 4) +     geom_step(aes(x = age, y = cp_predict_80100), data = new_data80100, color = 4) +     geom_step(aes(x = age, y = cp_predict_0.2), data = new_data0.2, color = 2) +     geom_step(aes(x = age, y = cp_predict_0.8), data = new_data0.8, color = 2) +     geom_step(aes(x = age, y = cp_predict_0.5), data = new_data0.5, color = 2) +     labs(x = \"Age\", y = \"Disease-free Survival\") +     theme_minimal() phs0.1 = as.numeric(quantile(test_data$phs, 0.1)) phs0.9 = as.numeric(quantile(test_data$phs, 0.9)) new_data0.1 = new_data0.2 new_data0.1$phs = phs0.1 new_data0.9 = new_data0.2 new_data0.9$phs = phs0.9 cp_predict_0.1 <- predict(cp_fit, new_data0.1, type = \"survival\") cp_predict_0.9 <- predict(cp_fit, new_data0.9, type = \"survival\")  ggplot() +     geom_step(aes(x = age, y = cp_predict_0020), data = new_data0020, color = 4) +     geom_step(aes(x = age, y = cp_predict_2080), data = new_data2080, color = 4) +     geom_step(aes(x = age, y = cp_predict_80100), data = new_data80100, color = 4) +     labs(x = \"Age\", y = \"Disease-free Survival\") +     theme_minimal() +     geom_step(aes(x = age, y = cp_predict_0.1), data = new_data0.1, color = 6)  +     geom_step(aes(x = age, y = cp_predict_0.9), data = new_data0.9, color = 6) # This is the curve for the group in the 80-100 quintile test_data80_100 = test_data[test_data$phs_group == \"80-100\", ]  surv_80_100 = survfit(Surv(age, status) ~ 1, test_data80_100) surv_80_100_data = data.frame(age = surv_80_100$time,                               surv = surv_80_100$surv)  ggplot() +      geom_step(aes(x = ages, y = cp_predict_0.9), data = new_data0.9, color = 4) + # blue     geom_step(aes(x = age, y = cp_predict_80100), data = new_data80100, color = 2) + #red     geom_step(aes(x = age, y = surv), data = surv_80_100_data, color = 3) + # green     labs(x = \"Age\", y = \"Disease-free Survival\") +     theme_minimal() ph_fit = cox.zph(cp_fit)  # Not sig. so proportional hazards assumption is met print(ph_fit) #>        chisq df    p #> phs    0.358  1 0.55 #> GLOBAL 0.358  1 0.55  # Residual plot visualizing this: plot(ph_fit)"},{"path":"https://amorris28.github.io/hazrd/articles/hazrd.html","id":"example-script","dir":"Articles","previous_headings":"","what":"Example Script","title":"Getting started with `{hazrd}`","text":"example script run entire hazrd analysis command line:","code":"Rscript hazrd_script.R phs.tsv metadata.tsv FALSE reports/ ######################################### # First argument: PHS file # tab delimited file, with or without header, first column ID, second column PHS score # file basename used as prefix for output # # Second argument: metadata file # tab delimited file with or without header, first column id,  second column age,  # third column status (0 or 1). Additional columns will be ignored. # # Third argument:  # boolean (i.e., TRUE or FALSE) indicating whether to inverse (x * -1) the PHS scores # to reverse the direction of effect. # # Fourth argument: # path to output directory, e.g., \"reports/\" # if the directory does not exist it will be created  ######################################## # Load packages library(hazrd) library(ggplot2)   ####################################### # parse arguments  args = commandArgs(trailingOnly=TRUE)  model_file = args[1] # PHS file  # model = gsub(\"\\\\_.*\",\"\", basename(args[1])) # filename for output model = gsub(\"\\\\..*\",\"\", basename(args[1])) # filename for output  metadata = read.table(args[2], col.names = c(\"id\", \"age\", \"status\")) # Phenotype data  inverse = args[3]  output = args[4]  ######################################### # Import PHS data  phs = read.table(model_file, col.names = c(\"id\", \"phs\"))  print(head(phs))  phs$phs = scale(phs$phs, center = TRUE, scale = TRUE)  if (inverse) {phs$phs = phs$phs * -1}  combined_data = merge(metadata, phs, by = \"id\")  combined_data = combined_data[!(is.na(combined_data$phs)), ]  ######################################### # Analyze PHS data  # PHS Histogram phs_hist =      phs_hist(combined_data, normalize = TRUE) +     labs(title = model) + theme(aspect.ratio=1)  ggsave(paste0(output, model, \"_hist.png\"), phs_hist,         units = \"px\", height = 1300, width = 1300, create.dir = TRUE)  # Performance metrics   HR80_20 = get_hr(combined_data, bootstrap.iterations = 300) ages = c(60, 70, 80) OR80_20 = lapply(ages, function(x) {get_or(combined_data, or_age = x, bootstrap.iterations = 300)}) c_index = get_cindex(combined_data, bootstrap.iterations = 300)  HR80_20$age = NA c_index$age = NA indices = list(HR80_20, OR80_20[[1]], OR80_20[[2]], OR80_20[[3]], c_index)  perform = do.call(rbind.data.frame, lapply(indices, function(x){data.frame(index = x$index,                                                                   value = x$value,                                                                   conf.low = x$conf.low,                                                                   conf.high = x$conf.high,                                                                   age = x$age)})) perform = cbind(model, perform) write.table(perform, paste0(output, model, \"_performance.tsv\"), sep = \"\\t\", row.names = FALSE)  # KM Curves curves = data.frame(curve0_20 = c(0,   0.2),                     curve20_70 = c(0.2, 0.7),                     curve80_98 = c(0.8, 0.98),                     curve98_100 = c(0.98, 1.0))  label_generator = function(x, y) {   x = x * 100   y = y * 100   out = paste0(\"PHS \", x, \"-\", y, \"th centile\")   return(out) }  km_curves = data.frame() for (i in seq_len(length(curves))) {   curven <- km_curve(combined_data,                        interval = curves[[i]],                      age_range = 40:100,                       scale = FALSE,                       inverse = FALSE)   curven$label = label_generator(curves[1, i], curves[2, i])   km_curves = rbind(km_curves, curven) }   km_curve = ggplot(km_curves, aes(x = time,                        y = estimate,                       ymin = conf.low,                       ymax = conf.high,                       col = label,                       fill = label)) +   geom_ribbon(alpha = 0.1,               color = 0) +   geom_step() +   theme_minimal() +   xlim(40, 100) +    ylim(0, 1) +   labs(x = \"Age\", y = \"Disease-free Survival\", title = model) +   scale_color_brewer(palette = \"Set1\",                      name = \"Centile\") +   scale_fill_brewer(palette = \"Set1\",                     name = \"Centile\")  + theme(aspect.ratio=1)  ggsave(paste0(output, model, \"_km_curve.png\"), km_curve,        units = \"px\", height = 1300, width = 1600, create.dir = TRUE)"},{"path":"https://amorris28.github.io/hazrd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Morris. Author, maintainer.","code":""},{"path":"https://amorris28.github.io/hazrd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morris (2025). hazrd: Polygenic Hazard Score Cox Proportional Hazards Model. R package version 0.1.0, https://amorris28.github.io/hazrd/.","code":"@Manual{,   title = {hazrd: Polygenic Hazard Score with Cox Proportional Hazards Model},   author = {Andrew Morris},   year = {2025},   note = {R package version 0.1.0},   url = {https://amorris28.github.io/hazrd/}, }"},{"path":"https://amorris28.github.io/hazrd/index.html","id":"hazrd","dir":"","previous_headings":"","what":"Polygenic Hazard Score with Cox Proportional Hazards Model","title":"Polygenic Hazard Score with Cox Proportional Hazards Model","text":"goal hazrd simplify standardize development testing polygenic hazard score models opinionated way based mainly past work PHS repo. Currently, functionality focuses external validation PHS models. includes calculation standard statistics (80-20 hazard ratios, 80-20 odds ratios, concordance index) plotting Kaplan-Meier curves cumulative incidence curves. future, expanded model development, internal validation, imaging risk scores, multimodal hazard scores, functions related Digital Avatar.","code":""},{"path":[]},{"path":"https://amorris28.github.io/hazrd/index.html","id":"github","dir":"","previous_headings":"Installation","what":"Github","title":"Polygenic Hazard Score with Cox Proportional Hazards Model","text":"install recent release Github, go release page, scroll Assets, download “Source code (tar.gz)” file. , R, run:","code":"install.packages(\"hazrd-0.1.0.tar.gz\", repos = NULL, type=\"source\")"},{"path":"https://amorris28.github.io/hazrd/index.html","id":"using-devtools","dir":"","previous_headings":"Installation","what":"Using devtools","title":"Polygenic Hazard Score with Cox Proportional Hazards Model","text":"--date installation changes since last release, install development version hazrd GitHub cloning repository: opening R installing package: Replace \"hazrd\" path repository local computer.","code":"git clone git@github.com:amorris28/hazrd.git devtools::install(\"hazrd\")"},{"path":"https://amorris28.github.io/hazrd/index.html","id":"on-a-remote-cluster","dir":"","previous_headings":"Installation > Using devtools","what":"On a remote cluster","title":"Polygenic Hazard Score with Cox Proportional Hazards Model","text":"install development version remote cluster, TSD, build tarball local clone Github repo: can install .tar.gz install.packages R:","code":"devtools::build(\"hazrd\") install.packages(\"hazrd_0.1.0.tar.gz\", repos = NULL, type=\"source\")"},{"path":"https://amorris28.github.io/hazrd/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Polygenic Hazard Score with Cox Proportional Hazards Model","text":"introduction use package, please see vignettes hazrd pkgdown website.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/boot_conf.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap confidence intervals for a custom statistic — boot_conf","title":"Bootstrap confidence intervals for a custom statistic — boot_conf","text":"function allows advanced users compute bootstrap confidence intervals statistic long function passed f returns single value statistic. users, built-functions get_hr recommended.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/boot_conf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap confidence intervals for a custom statistic — boot_conf","text":"","code":"boot_conf(data, bootstrap.iterations, conf.level = 0.95, f, ...)"},{"path":"https://amorris28.github.io/hazrd/reference/boot_conf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap confidence intervals for a custom statistic — boot_conf","text":"data data.frame containing columns phs, age, status bootstrap.iterations number bootstrap iterations run. conf.level confidence level use confidence interval. Must strictly greater 0 less 1. Defaults 0.95, corresponds 95 percent confidence interval. f name function perform bootstrapping . ... arguments passed f().","code":""},{"path":"https://amorris28.github.io/hazrd/reference/boot_conf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap confidence intervals for a custom statistic — boot_conf","text":"list confidence intervals","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_cindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a C-index for a PHS model (low-level) — calc_cindex","title":"Calculate a C-index for a PHS model (low-level) — calc_cindex","text":"function performs actual C-index calculation used internally get_cindex. users call get_cindex() directly. function exported provide transparency reproducibility.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_cindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a C-index for a PHS model (low-level) — calc_cindex","text":"","code":"calc_cindex(data)"},{"path":"https://amorris28.github.io/hazrd/reference/calc_cindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a C-index for a PHS model (low-level) — calc_cindex","text":"data data.frame containing columns phs, age, status","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_cindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a C-index for a PHS model (low-level) — calc_cindex","text":"numeric hazard ratio","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a hazard ratio between two percentile groups (low-level) — calc_hr","title":"Calculate a hazard ratio between two percentile groups (low-level) — calc_hr","text":"function performs actual HR calculation used internally get_hr. users call get_hr() directly. function exported provide transparency reproducibility.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a hazard ratio between two percentile groups (low-level) — calc_hr","text":"","code":"calc_hr(data, numerator, denominator)"},{"path":"https://amorris28.github.io/hazrd/reference/calc_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a hazard ratio between two percentile groups (low-level) — calc_hr","text":"data data.frame containing columns phs, age, status numerator vector specifying quantiles numerator (e.g., c(0.80, 0.98)). denominator vector specifying quantiles denominator (e.g., c(0.30, 0.70)).","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_hr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a hazard ratio between two percentile groups (low-level) — calc_hr","text":"numeric hazard ratio","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_hrsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a hazard ratio for a one standard deviation increase in PHS (low-level) — calc_hrsd","title":"Calculate a hazard ratio for a one standard deviation increase in PHS (low-level) — calc_hrsd","text":"function performs actual HR calculation used internally get_hrsd. users call get_hrsd() directly. function exported provide transparency reproducibility.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_hrsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a hazard ratio for a one standard deviation increase in PHS (low-level) — calc_hrsd","text":"","code":"calc_hrsd(data)"},{"path":"https://amorris28.github.io/hazrd/reference/calc_hrsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a hazard ratio for a one standard deviation increase in PHS (low-level) — calc_hrsd","text":"data data.frame containing columns phs, age, status","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_hrsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a hazard ratio for a one standard deviation increase in PHS (low-level) — calc_hrsd","text":"numeric hazard ratio","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_or.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a odds ratio between two percentile groups (low-level) — calc_or","title":"Calculate a odds ratio between two percentile groups (low-level) — calc_or","text":"function performs actual calculation used internally get_or. users call get_or() directly. function exported provide transparency reproducibility.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a odds ratio between two percentile groups (low-level) — calc_or","text":"","code":"calc_or(data, or_age, numerator, denominator)"},{"path":"https://amorris28.github.io/hazrd/reference/calc_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a odds ratio between two percentile groups (low-level) — calc_or","text":"data data.frame containing columns phs, age, status or_age integer specifying age odds ratio calculated numerator vector specifying quantiles numerator (e.g., c(0.80, 0.98)). denominator vector specifying quantiles denominator (e.g., c(0.30, 0.70)).","code":""},{"path":"https://amorris28.github.io/hazrd/reference/calc_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a odds ratio between two percentile groups (low-level) — calc_or","text":"numeric odds ratio","code":""},{"path":"https://amorris28.github.io/hazrd/reference/create_lookup_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a lookup table for individual prediction of risk based on PHS — create_lookup_table","title":"Creates a lookup table for individual prediction of risk based on PHS — create_lookup_table","text":"function takes data set phs, age, status returns two matrices: one PHS score 99 percentiles (1-99\\ predicted K-M curve (plus confidence intervals) percentiles. two tables contain now individualized subject information can exported predict risk new subjects PHS scores.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/create_lookup_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a lookup table for individual prediction of risk based on PHS — create_lookup_table","text":"","code":"create_lookup_table(data = NULL, phs = \"phs\", age = \"age\", status = \"status\")"},{"path":"https://amorris28.github.io/hazrd/reference/create_lookup_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a lookup table for individual prediction of risk based on PHS — create_lookup_table","text":"data optional data.frame containing variables phs, age, status phs optional string specifying column name data containing polygenic hazard score subject unquoted name vector containing values. default \"phs\" age optional string specifying column name data containing age subject unquoted name vector containing values. cases, age event (e.g., diagnosis) controls age censoring (e.g., last observation). default \"age\" status optional string specifying column name data containing case-control status (0 = censored, 1 = event) unquoted name vector containing values. default \"status\"","code":""},{"path":"https://amorris28.github.io/hazrd/reference/create_lookup_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a lookup table for individual prediction of risk based on PHS — create_lookup_table","text":"list containing two tables","code":""},{"path":"https://amorris28.github.io/hazrd/reference/create_lookup_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a lookup table for individual prediction of risk based on PHS — create_lookup_table","text":"","code":"lookup_table <- create_lookup_table(test_data)"},{"path":"https://amorris28.github.io/hazrd/reference/cum_inc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cumulative Incidence — cum_inc","title":"Compute Cumulative Incidence — cum_inc","text":"Compute Cumulative Incidence","code":""},{"path":"https://amorris28.github.io/hazrd/reference/cum_inc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cumulative Incidence — cum_inc","text":"","code":"cum_inc(   country,   inc_file = \"prostate_cancer_incidence_country.csv\",   prop_file = \"intermediate_high_proportions_CAP.csv\" )"},{"path":"https://amorris28.github.io/hazrd/reference/cum_inc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cumulative Incidence — cum_inc","text":"country country name inc_file incidence file name prop_file proportions file name","code":""},{"path":"https://amorris28.github.io/hazrd/reference/cum_inc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cumulative Incidence — cum_inc","text":"list cumulative incidence incidence data frames","code":""},{"path":"https://amorris28.github.io/hazrd/reference/fit_phs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a polygenic hazard score (PHS) model — fit_phs","title":"Fit a polygenic hazard score (PHS) model — fit_phs","text":"fit_phs() fits PHS model either formula interface (similar coxph()) directly data frame specified columns. returns object class \"phsfit\", can passed get_hr(), get_or(), get_cindex(), etc.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/fit_phs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a polygenic hazard score (PHS) model — fit_phs","text":"","code":"fit_phs(object, ...)  # S3 method for class 'formula' fit_phs(object, data, bootstrap.iterations = NULL, conf.level = 0.95, ...)  # S3 method for class 'data.frame' fit_phs(   object,   age = \"age\",   status = \"status\",   phs = \"phs\",   bootstrap.iterations = NULL,   conf.level = 0.95,   ... )"},{"path":"https://amorris28.github.io/hazrd/reference/fit_phs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a polygenic hazard score (PHS) model — fit_phs","text":"object Either survival formula, e.g. Surv(age, status) ~ phs (formula interface), data.frame containing variables phs, age, status (data-frame interface). ... Additional arguments (currently ignored). data data.frame containing variables formula (formula interface ). bootstrap.iterations Number bootstrap iterations run generate confidence intervals. conf.level confidence level use confidence interval conf.int = TRUE. Must strictly greater 0 less 1. Defaults 0.95, corresponds 95 percent confidence interval. age string specifying column name data containing age subject. cases, age event (e.g., diagnosis) controls age censoring (e.g., last observation). Default \"age\". status string specifying column name data containing case-control status (0 = censored, 1 = event). Default \"status\". phs string specifying column name data containing polygenic hazard score subject (data-frame interface ). Default \"phs\".","code":""},{"path":"https://amorris28.github.io/hazrd/reference/fit_phs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a polygenic hazard score (PHS) model — fit_phs","text":"object class \"phsfit\" containing base Cox model, bootstrap fits indices, formula, original data, bootstrap metadata.","code":""},{"path":[]},{"path":"https://amorris28.github.io/hazrd/reference/fit_phs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a polygenic hazard score (PHS) model — fit_phs","text":"","code":"# Formula interface: fit <- fit_phs(Surv(age, status) ~ phs, data = test_data)  # Data frame interface: fit <- fit_phs(test_data, age = \"age\", status = \"status\", phs = \"phs\")"},{"path":"https://amorris28.github.io/hazrd/reference/get_cindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Return concordance index (C-index) from a PHS model — get_cindex","title":"Return concordance index (C-index) from a PHS model — get_cindex","text":"get_cindex() calculates concordance index either fitted PHS object (phsfit) directly data.frame. Optionally, bootstrap confidence intervals can computed.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_cindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return concordance index (C-index) from a PHS model — get_cindex","text":"","code":"get_cindex(object, ...)  # S3 method for class 'data.frame' get_cindex(   object,   phs = \"phs\",   age = \"age\",   status = \"status\",   bootstrap.iterations = NULL,   conf.level = 0.95,   ... )  # S3 method for class 'phsfit' get_cindex(object, bootstrap.iterations = NULL, conf.level = 0.95, ...)"},{"path":"https://amorris28.github.io/hazrd/reference/get_cindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return concordance index (C-index) from a PHS model — get_cindex","text":"object object concordance index desired. Typically data.frame phsfit object. ... Additional arguments (currently ignored). phs Optional string specifying column data containing polygenic hazard scores. Default: \"phs\". age Optional string specifying column data containing ages. Default: \"age\". status Optional string specifying column data containing case-control status (0=censored, 1=event). Default: \"status\". bootstrap.iterations Number bootstrap iterations (used data.frame method precomputed phsfit). conf.level Confidence level intervals (default 0.95).","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_cindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return concordance index (C-index) from a PHS model — get_cindex","text":"list containing: value Point estimate concordance index conf.low Lower bound confidence interval (bootstrapped) conf.high Upper bound confidence interval (bootstrapped)","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_cindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return concordance index (C-index) from a PHS model — get_cindex","text":"","code":"# Using a data.frame c_index <- get_cindex(test_data, bootstrap.iterations = 300)  # Using a phsfit object phsfit <- fit_phs(test_data, bootstrap.iterations = 300) c_index <- get_cindex(phsfit)"},{"path":"https://amorris28.github.io/hazrd/reference/get_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Return hazard ratios (HR) from a PHS model — get_hr","title":"Return hazard ratios (HR) from a PHS model — get_hr","text":"get_hr() calculates hazard ratios either fitted PHS object (phsfit) directly data.frame. returns list containing point estimate optionally bootstrap confidence intervals.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return hazard ratios (HR) from a PHS model — get_hr","text":"","code":"get_hr(object, ...)  # S3 method for class 'data.frame' get_hr(   object,   phs = \"phs\",   age = \"age\",   status = \"status\",   numerator = c(0.8, 1),   denominator = c(0, 0.2),   bootstrap.iterations = NULL,   conf.level = 0.95,   ... )  # S3 method for class 'phsfit' get_hr(   object,   numerator = c(0.8, 1),   denominator = c(0, 0.2),   conf.level = 0.95,   ... )"},{"path":"https://amorris28.github.io/hazrd/reference/get_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return hazard ratios (HR) from a PHS model — get_hr","text":"object object hazard ratio desired. Typically data.frame phsfit object. ... Additional arguments (currently ignored) phs optional string specifying column name data containing polygenic hazard score subject. default \"phs\" age optional string specifying column name data containing age subject. cases, age event (e.g., diagnosis) controls age censoring (e.g., last observation). default \"age\" status optional string specifying column name data containing case-control status (0 = censored, 1 = event). default \"status\" numerator Numeric vector quantiles numerator (e.g., c(0.80, 1.0)). denominator Numeric vector quantiles denominator (e.g., c(0.0, 0.2)). bootstrap.iterations Number bootstrap iterations (used data.frame method). conf.level Confidence level intervals (default 0.95).","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_hr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return hazard ratios (HR) from a PHS model — get_hr","text":"list containing: value Point estimate HR conf.low Lower bound confidence interval (bootstrapped) conf.high Upper bound confidence interval (bootstrapped)","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_hr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return hazard ratios (HR) from a PHS model — get_hr","text":"","code":"# Using a data.frame HR <- get_hr(test_data, bootstrap.iterations = 300)  # Using a phsfit object phsfit <- fit_phs(test_data, bootstrap.iterations = 300) HR <- get_hr(phsfit)"},{"path":"https://amorris28.github.io/hazrd/reference/get_hrsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the hazard ratio for a 1 standard deviation increase in PHS — get_hrsd","title":"Return the hazard ratio for a 1 standard deviation increase in PHS — get_hrsd","text":"get_hrsd() calculates hazard ratio 1-SD increase polygenic hazard scores either fitted PHS object (phsfit) directly data.frame. Optionally, bootstrap confidence intervals can computed.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_hrsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the hazard ratio for a 1 standard deviation increase in PHS — get_hrsd","text":"","code":"get_hrsd(object, ...)  # S3 method for class 'data.frame' get_hrsd(   object,   phs = \"phs\",   age = \"age\",   status = \"status\",   bootstrap.iterations = NULL,   conf.level = 0.95,   ... )  # S3 method for class 'phsfit' get_hrsd(object, bootstrap.iterations = NULL, conf.level = 0.95, ...)"},{"path":"https://amorris28.github.io/hazrd/reference/get_hrsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the hazard ratio for a 1 standard deviation increase in PHS — get_hrsd","text":"object object HRSD desired. Typically data.frame phsfit object. ... Additional arguments (currently ignored). phs Optional string specifying column data containing polygenic hazard scores. Default: \"phs\". age Optional string specifying column data containing ages. Default: \"age\". status Optional string specifying column data containing case-control status (0=censored, 1=event). Default: \"status\". bootstrap.iterations Number bootstrap iterations (used data.frame method precomputed phsfit). conf.level Confidence level intervals (default 0.95).","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_hrsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the hazard ratio for a 1 standard deviation increase in PHS — get_hrsd","text":"list containing: value Point estimate hazard ratio 1-SD increase PHS conf.low Lower bound confidence interval (bootstrapped) conf.high Upper bound confidence interval (bootstrapped)","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_hrsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the hazard ratio for a 1 standard deviation increase in PHS — get_hrsd","text":"","code":"# Using a data.frame HRSD <- get_hrsd(test_data, bootstrap.iterations = 300)  # Using a phsfit object phsfit <- fit_phs(test_data, bootstrap.iterations = 300) HRSD <- get_hrsd(phsfit)"},{"path":"https://amorris28.github.io/hazrd/reference/get_or.html","id":null,"dir":"Reference","previous_headings":"","what":"Return odds ratios (OR) from a PHS model at a specified age — get_or","title":"Return odds ratios (OR) from a PHS model at a specified age — get_or","text":"get_or() calculates odds ratios either fitted PHS object (phsfit) directly data.frame specified age. returns list containing point estimate optionally bootstrap confidence intervals.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return odds ratios (OR) from a PHS model at a specified age — get_or","text":"","code":"get_or(object, or_age, ...)  # S3 method for class 'data.frame' get_or(   object,   or_age,   phs = \"phs\",   age = \"age\",   status = \"status\",   numerator = c(0.8, 1),   denominator = c(0, 0.2),   bootstrap.iterations = NULL,   conf.level = 0.95,   ... )  # S3 method for class 'phsfit' get_or(   object,   or_age,   numerator = c(0.8, 1),   denominator = c(0, 0.2),   bootstrap.iterations = NULL,   conf.level = 0.95,   ... )"},{"path":"https://amorris28.github.io/hazrd/reference/get_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return odds ratios (OR) from a PHS model at a specified age — get_or","text":"object object odds ratio desired. Typically data.frame phsfit object. or_age Integer specifying age odds ratio calculated. ... Additional arguments (currently ignored) phs optional string specifying column name data containing polygenic hazard score subject. default \"phs\" age optional string specifying column name data containing age subject. cases, age event (e.g., diagnosis) controls age censoring (e.g., last observation). default \"age\" status optional string specifying column name data containing case-control status (0 = censored, 1 = event). default \"status\" numerator Numeric vector quantiles numerator (e.g., c(0.80, 1.0)). denominator Numeric vector quantiles denominator (e.g., c(0.0, 0.2)). bootstrap.iterations Number bootstrap iterations (used data.frame method). conf.level Confidence level intervals (default 0.95).","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return odds ratios (OR) from a PHS model at a specified age — get_or","text":"list containing: value Point estimate conf.low Lower bound confidence interval (bootstrapped) conf.high Upper bound confidence interval (bootstrapped)","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_or.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return odds ratios (OR) from a PHS model at a specified age — get_or","text":"","code":"# Using a data.frame OR <- get_or(test_data, or_age = 70, bootstrap.iterations = 300)  # Using a phsfit object phsfit <- fit_phs(test_data, bootstrap.iterations = 300) OR <- get_or(phsfit, or_age = 70)"},{"path":"https://amorris28.github.io/hazrd/reference/get_phs_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygenic Hazard Score Age Calculation — get_phs_age","title":"Polygenic Hazard Score Age Calculation — get_phs_age","text":"Polygenic Hazard Score Age Calculation","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_phs_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygenic Hazard Score Age Calculation — get_phs_age","text":"","code":"get_phs_age(age, ref, riskgroup, estimate_age)"},{"path":"https://amorris28.github.io/hazrd/reference/get_phs_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygenic Hazard Score Age Calculation — get_phs_age","text":"age Vector ages ref Reference scores riskgroup Vector risk group scores estimate_age Age estimate","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_phs_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygenic Hazard Score Age Calculation — get_phs_age","text":"Estimated polygenic hazard score age","code":""},{"path":"https://amorris28.github.io/hazrd/reference/get_phs_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygenic Hazard Score Age Calculation — get_phs_age","text":"","code":"if (FALSE) { # \\dontrun{ phs_age <- get_phs_age(age, ref, riskgroup, estimate_age) } # }"},{"path":"https://amorris28.github.io/hazrd/reference/hazrd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hazrd: Polygenic Hazard Score with Cox Proportional Hazards Model — hazrd-package","title":"hazrd: Polygenic Hazard Score with Cox Proportional Hazards Model — hazrd-package","text":"Tools compute polygenic hazard scores using Cox proportional hazards model lasso regularization via glmnet.","code":""},{"path":[]},{"path":"https://amorris28.github.io/hazrd/reference/hazrd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hazrd: Polygenic Hazard Score with Cox Proportional Hazards Model — hazrd-package","text":"Maintainer: Andrew Morris andrewmorris@mailbox.org","code":""},{"path":"https://amorris28.github.io/hazrd/reference/km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Kaplan-Meier (K-M) curves from a PHS model — km_curve","title":"Return Kaplan-Meier (K-M) curves from a PHS model — km_curve","text":"km_curve() generic function calculates Kaplan-Meier survival curves coxph fit directly data.frame. returns data.frame time, survival estimates, upper/lower confidence intervals.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Kaplan-Meier (K-M) curves from a PHS model — km_curve","text":"","code":"km_curve(object, ...)  # S3 method for class 'data.frame' km_curve(   object,   phs = \"phs\",   age = \"age\",   status = \"status\",   interval = c(0, 1),   age_range = 40:100,   scale = FALSE,   inverse = FALSE,   ... )  # S3 method for class 'phsfit' km_curve(   object,   phs = \"phs\",   age = \"age\",   status = \"status\",   interval = c(0, 1),   age_range = 40:100,   scale = FALSE,   inverse = FALSE,   ... )"},{"path":"https://amorris28.github.io/hazrd/reference/km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Kaplan-Meier (K-M) curves from a PHS model — km_curve","text":"object object KM curve desired. method details, see specific method. ... Additional arguments (currently ignored) phs String specifying column name data containing polygenic hazard score. Default \"phs\". age String specifying column name data containing age subject. Default \"age\". status String specifying column name data containing case/control status (0 = censored, 1 = event). Default \"status\". interval Vector length 2 giving lower upper quantiles PHS define interval. default includes PHSes: c(0, 1). age_range Vector ages curves calculated. Default 40:100. scale Logical; TRUE, centers scales PHS unit variance. Default FALSE. inverse Logical; TRUE, reverses PHS direction. Default FALSE.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Kaplan-Meier (K-M) curves from a PHS model — km_curve","text":"data.frame columns time, estimate, conf.low, conf.high, cumhaz.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/km_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Kaplan-Meier (K-M) curves from a PHS model — km_curve","text":"","code":"phsfit <- fit_phs(test_data) km_df <- km_curve(phsfit)  # data.frame interface km_df2 <- km_curve(test_data)  if (FALSE) { # \\dontrun{ library(ggplot2) ggplot(km_df, aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high)) +   geom_ribbon() +   geom_step() } # }"},{"path":"https://amorris28.github.io/hazrd/reference/phs_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Histogram of Cases and Controls by PHS — phs_hist","title":"Plot Histogram of Cases and Controls by PHS — phs_hist","text":"function takes PHS scores case/control status plots histogram.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/phs_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Histogram of Cases and Controls by PHS — phs_hist","text":"","code":"phs_hist(   data = NULL,   phs = \"phs\",   status = \"status\",   normalize = FALSE,   scale = FALSE,   inverse = FALSE )"},{"path":"https://amorris28.github.io/hazrd/reference/phs_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Histogram of Cases and Controls by PHS — phs_hist","text":"data optional data.frame containing variables phs, age, status phs optional string specifying column name data containing polygenic hazard score subject unquoted name vector containing values. default \"phs\" status optional string specifying column name data containing case-control status (0 = censored, 1 = event) unquoted name vector containing values. default \"status\" normalize Boolean indicating whether normalize histogram area = 1. replaces y axis denisty instead count. Helpful compare distributions different counts. Default = FALSE. scale Boolean indicating whether center scale PHS scores unit variance. Default = FALSE. inverse Boolean indicating whether inverse (x * -1) PHS scores reverse direction effect. Default = FALSE.","code":""},{"path":"https://amorris28.github.io/hazrd/reference/phs_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Histogram of Cases and Controls by PHS — phs_hist","text":"ggplot object","code":""},{"path":"https://amorris28.github.io/hazrd/reference/phs_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Histogram of Cases and Controls by PHS — phs_hist","text":"","code":"phs_hist <- phs_hist(test_data, normalize = TRUE)"},{"path":"https://amorris28.github.io/hazrd/reference/phs_input_example.html","id":null,"dir":"Reference","previous_headings":"","what":"PHS Input Example — phs_input_example","title":"PHS Input Example — phs_input_example","text":"set random genotype data","code":""},{"path":"https://amorris28.github.io/hazrd/reference/phs_input_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PHS Input Example — phs_input_example","text":"","code":"phs_input_example"},{"path":[]},{"path":"https://amorris28.github.io/hazrd/reference/phs_input_example.html","id":"phs-input-example","dir":"Reference","previous_headings":"","what":"phs_input_example","title":"PHS Input Example — phs_input_example","text":"data frame 4,000 rows 1,996 columns: age Age diagnosis age censoring subject status Case/control status c11_pos1707163, ... Genotype locus","code":""},{"path":"https://amorris28.github.io/hazrd/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"PHS Test Data — test_data","title":"PHS Test Data — test_data","text":"simulated dataset PHS scores","code":""},{"path":"https://amorris28.github.io/hazrd/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PHS Test Data — test_data","text":"","code":"test_data"},{"path":[]},{"path":"https://amorris28.github.io/hazrd/reference/test_data.html","id":"test-data","dir":"Reference","previous_headings":"","what":"test_data","title":"PHS Test Data — test_data","text":"data frame 1,000 rows 3 columns: phs Polygenic hazard score age Age diagnosis age censoring subject status Case/control status","code":""}]
